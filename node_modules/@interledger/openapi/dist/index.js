"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidationError = exports.isHttpMethod = exports.HttpMethod = exports.OpenAPIValidatorMiddlewareError = exports.createValidatorMiddleware = void 0;
exports.createOpenAPI = createOpenAPI;
const json_schema_ref_parser_1 = __importDefault(require("@apidevtools/json-schema-ref-parser"));
const _2020_1 = __importDefault(require("ajv/dist/2020"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const openapi_default_setter_1 = __importDefault(require("openapi-default-setter"));
const openapi_request_coercer_1 = __importDefault(require("openapi-request-coercer"));
const openapi_request_validator_1 = __importDefault(require("openapi-request-validator"));
const openapi_response_validator_1 = __importDefault(require("openapi-response-validator"));
const openapi_types_1 = require("openapi-types");
var middleware_1 = require("./middleware");
Object.defineProperty(exports, "createValidatorMiddleware", { enumerable: true, get: function () { return middleware_1.createValidatorMiddleware; } });
Object.defineProperty(exports, "OpenAPIValidatorMiddlewareError", { enumerable: true, get: function () { return middleware_1.OpenAPIValidatorMiddlewareError; } });
exports.HttpMethod = {
    ...openapi_types_1.OpenAPIV3.HttpMethods
};
const ajv = new _2020_1.default();
(0, ajv_formats_1.default)(ajv);
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
const isHttpMethod = (o) => Object.values(exports.HttpMethod).includes(o);
exports.isHttpMethod = isHttpMethod;
async function createOpenAPI(spec) {
    return new OpenAPIImpl((await json_schema_ref_parser_1.default.dereference(spec)));
}
class OpenAPIImpl {
    constructor(spec) {
        if (!spec.paths) {
            throw new Error();
        }
        this.paths = spec.paths;
    }
    createRequestValidator({ path, method }) {
        const operation = this.paths[path]?.[method];
        if (!operation) {
            throw new Error();
        }
        const queryParams = operation.parameters;
        const coercer = queryParams &&
            new openapi_request_coercer_1.default({
                parameters: queryParams
            });
        const defaultSetter = queryParams &&
            new openapi_default_setter_1.default({
                parameters: queryParams
            });
        const parameters = queryParams || [];
        if (this.paths[path].parameters) {
            parameters.push(...this.paths[path].parameters);
        }
        const requestValidator = new openapi_request_validator_1.default({
            parameters,
            // OpenAPIRequestValidator hasn't been updated with OpenAPIV3_1 types
            requestBody: operation.requestBody,
            errorTransformer,
            customFormats
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return (request) => {
            if (coercer) {
                coercer.coerce(request);
            }
            if (defaultSetter) {
                defaultSetter.handle(request);
            }
            const errors = requestValidator.validateRequest(request);
            if (errors) {
                throw errors;
            }
            return true;
        };
    }
    createResponseValidator({ path, method }) {
        const responses = this.paths[path]?.[method]?.responses;
        if (!responses) {
            throw new Error();
        }
        const responseValidator = new openapi_response_validator_1.default({
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore: OpenAPIResponseValidator supports v3 responses but its types aren't updated
            responses,
            errorTransformer,
            customFormats
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return (response) => {
            const errors = responseValidator.validateResponse(response.status.toString(), response.body);
            if (errors) {
                throw errors;
            }
            return true;
        };
    }
}
const errorTransformer = (_openapiError, ajvError) => {
    // Remove preceding 'data/'
    // Delineate subfields with '.'
    const message = ajv.errorsText([ajvError]).slice(5).replace(/\//g, '.');
    const additionalProperty = ajvError.keyword === 'additionalProperties'
        ? `: ${ajvError.params.additionalProperty}`
        : '';
    return {
        message: message + additionalProperty
    };
};
const customFormats = {
    uint64: function (input) {
        try {
            const value = BigInt(input);
            return value >= BigInt(0);
        }
        catch (e) {
            return false;
        }
    }
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isValidationError = (err) => Array.isArray(err.errors);
exports.isValidationError = isValidationError;
