"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAPIValidatorMiddlewareError = void 0;
exports.createValidatorMiddleware = createValidatorMiddleware;
const _1 = require("./");
function createValidatorMiddleware(spec, options, validationOptions = {
    validateRequest: true,
    validateResponse: true
}) {
    const requestValidator = spec.createRequestValidator(options);
    const responseValidator = spec.createResponseValidator(options);
    return async (ctx, next) => {
        if (validationOptions?.validateRequest) {
            // TODO: Allow 'application/*+json'
            if (!ctx.accepts('application/json')) {
                throw new OpenAPIValidatorMiddlewareError('Received error validating OpenAPI request: Must accept application/json', 406);
            }
            try {
                requestValidator(ctx.request);
            }
            catch (err) {
                if ((0, _1.isValidationError)(err)) {
                    throw new OpenAPIValidatorMiddlewareError(`Received error validating OpenAPI request: ${err.errors[0]?.message}`, err.status || 500);
                }
                throw err; // Should not be possible (only ValidationError is thrown in requestValidator)
            }
        }
        await next();
        if (validationOptions?.validateResponse) {
            try {
                responseValidator(ctx.response);
            }
            catch (err) {
                if ((0, _1.isValidationError)(err)) {
                    throw new OpenAPIValidatorMiddlewareError(`Received error validating OpenAPI response: ${err.errors[0]?.message}`, err.status || 500);
                }
                throw err; // Should not be possible (only ValidationError is thrown in responseValidator)
            }
        }
    };
}
class OpenAPIValidatorMiddlewareError extends Error {
    constructor(message, status) {
        super(message);
        this.name = 'OpenAPIValidatorMiddlewareError';
        this.status = status;
    }
}
exports.OpenAPIValidatorMiddlewareError = OpenAPIValidatorMiddlewareError;
