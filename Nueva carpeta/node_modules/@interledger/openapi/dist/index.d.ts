import { OpenAPIV3, OpenAPIV3_1 } from 'openapi-types';
export { createValidatorMiddleware, OpenAPIValidatorMiddlewareError } from './middleware';
export declare const HttpMethod: {
    GET: OpenAPIV3.HttpMethods.GET;
    PUT: OpenAPIV3.HttpMethods.PUT;
    POST: OpenAPIV3.HttpMethods.POST;
    DELETE: OpenAPIV3.HttpMethods.DELETE;
    OPTIONS: OpenAPIV3.HttpMethods.OPTIONS;
    HEAD: OpenAPIV3.HttpMethods.HEAD;
    PATCH: OpenAPIV3.HttpMethods.PATCH;
    TRACE: OpenAPIV3.HttpMethods.TRACE;
};
export type HttpMethod = OpenAPIV3.HttpMethods;
export declare const isHttpMethod: (o: any) => o is HttpMethod;
export declare function createOpenAPI(spec: string): Promise<OpenAPI>;
interface Paths<T extends Record<string, unknown> = Record<string, unknown>, P extends Record<string, unknown> = Record<string, unknown>> {
    [pattern: string]: OpenAPIV3_1.PathItemObject<T> & P;
}
export interface RequestOptions {
    path: string;
    method: HttpMethod;
}
export interface Response {
    status: number;
    body: any;
}
interface ValidatedResponse<BodyT> {
    status: number;
    body: BodyT;
}
export type RequestValidator<T> = (request: any) => request is T;
export type ResponseValidator<BodyT> = (response: Response) => response is ValidatedResponse<BodyT>;
export interface OpenAPI {
    paths: Paths;
    createRequestValidator<T>(options: RequestOptions): RequestValidator<T>;
    createResponseValidator<BodyT>(options: RequestOptions): ResponseValidator<BodyT>;
}
interface TransformedError {
    message: string;
}
export interface ValidationError {
    status?: number;
    errors: TransformedError[];
}
export declare const isValidationError: (err: any) => err is ValidationError;
